//=========================================================================
// HW#: HW6 dgraph.cpp
// Your name: Alejandro Aquino
// Compiler:  g++
// File type: implementation file
//=========================================================================
#include <iostream>
#include <string>
#include <fstream>
using namespace std;
#include "dgraph.h"

//Purpose: initialize dgraphs variables
dgraph::dgraph()
{
  countUsed = 0;
  for(int i=0;i<SIZE;i++)
    {
      Gtable[i].vertexName = ' ';
      Gtable[i].outDegree = 0;
      Gtable[i].visit = 0;
    }
}

//Purpose: is to read the table.txt file to put them into
//         the table variables
void dgraph::fillTable()
{
  ifstream fin;
  fin.open("table.txt"); //used to open .txt file
  char X,x;

  while(fin >> Gtable[countUsed].vertexName)//reads name
   {
     fin >> Gtable[countUsed].outDegree; //reads degree

       for(int i=0;i<Gtable[countUsed].outDegree;i++)
	 {
	   fin >> x;
	   (Gtable[countUsed].adjacentOnes).addRear(x);
	   // this uses a slist function from HW3
	 }//end of for loop
     
     countUsed++;// increment the countUsed
   }//end of while
 
  fin.close(); //the file is closed after while loop
}

//Purpose: is to display all of the table
void dgraph::displayGraph()
{
  for(int i=0;i<countUsed;i++)
    {
      if(!Gtable[i].adjacentOnes.isEmpty())
	{ //displays name,degree, and slist files
	  cout << Gtable[i].vertexName << endl;
	  cout << Gtable[i].outDegree << endl;
	  (Gtable[i].adjacentOnes).displayAll();
	}

      else//if not found it displays empty
	{ 
	  cout << "----The graph is [EMPTY]----" << endl;
	}
    }//end of for loop
}

//Purpose: to find the degree and return it. But if it was not found 
//         it will return -1
int dgraph::findOutDegree(char d)
{
  //goes through the loop to find degree
  for(int i=0;i<countUsed;i++)
    {
      if(Gtable[i].vertexName == d)
	return Gtable[i].outDegree; //returns if successfully found
    }//end of for loop

  return -1;//used if not found in the loop
}

//Purpose: this function will find the adjacent ones of the vertex name.
slist dgraph::findAdjacency(char a)
{
  //goes through the foor loop to find adjacent ones of the vertex name.
  for(int i=0;i<countUsed;i++)
    {
      if(Gtable[i].vertexName == a)
	return Gtable[i].adjacentOnes;
    }//end of for loop
}

